module.exports = {

	// path to socket file
	"socket": "/path/to/tileblaster.sock",

	// path to tile directory
	"tiles": "/path/to/tiles",

	// parallel request queue size
	"queue": 100,

	// parallel request queue size
	"id": "tileblaster",

	// provide errors as response headers
	"hints": false,

	// nsa heartbeat server, if so desired
	"heartbeat": "udp4://nsa.example.com:30826",

	// clean up every so often
	"cleanup": "15m",

	// maps
	"maps": {
		
		// map id, accessible via //server/mapid/z/x/y.ext
		"example": {
		
			// backend url: 
			// * {s} subdomains specified in sub
			// * {z}, {x}, {y} tile coordinates
			// * {e} extension
			// * {r} resolution marker
			"url": "https://{s}.tiles.example.com/tiles/{z}/{x}/{y}{r}.{e}",
		
			// url points to cloudtiles container (â†’ https://github.com/OpenCloudTiles/opencloudtiles-specification)
			"cloudtiles": false,
			
			// backend uses tms instead of zxy
			"tms": false,
		
			// possible extensions
			"ext": ["mvt","json","topojson","png","jpg"],

			// valid zoom levels
			"zoom": [0,16],

			// valid subdomains
			"sub": ["a","b","c","d"],

			// bounding box, west, south, east, north
			"bbox": [-180,-90,180,90],

			// valid mimetypes from backend server
			"mime": ["application/vnd.mapbox-vector-tile","application/x-protobuf","application/json"],

			// valid resolution markers
			"res": ["@2x","@4x"],
			
			// optimize tiles
			// * .png with `optipng`
			// * .jpg with `mozjpeg`
			"optimize": true,
			
			// compress tiles (only makes sense for non-rastered tiles like json, pbf, mvt)
			"compress": [ "gz", "br" ],
			
			// write tiles to disk
			"cache": true,

			// minimum time tiles are kept
			"expires": "1d",
			
		},
		
		// more backends here

	},

};
